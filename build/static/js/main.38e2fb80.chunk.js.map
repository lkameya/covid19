{"version":3,"sources":["components/RacingBarChart.js","hooks/useResizeObserver.js","countries.js","App.js","hooks/useInterval.js","index.js"],"names":["RacingBarChart","data","type","svgRef","useRef","wrapperRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","svg","select","sort","a","b","value","yScale","scaleBand","paddingInner","domain","map","index","range","height","xScale","scaleLinear","max","width","selectAll","name","join","enter","append","attr","color","bandwidth","transition","text","emojiFlags","countryCode","country","code","getCountryCode","emoji","style","marginBottom","countries","getColors","App","setData","total","setTotal","iteration","setIteration","currentData","setCurrentData","setType","fetch","then","response","ok","json","length","catch","error","console","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","Object","keys","x","i","confirmed","deaths","date","filter","some","item","includes","handleChange","e","target","moment","format","className","checked","onChange","onClick","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38e2fb80.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { select, scaleBand, scaleLinear, max } from \"d3\";\nimport useResizeObserver from \"../hooks/useResizeObserver\";\nimport emojiFlags from \"emoji-flags\";\n\nconst getCountryCode = country => {\n  let code;\n  switch (country) {\n    case \"China\":\n      code = \"CN\";\n      break;\n    case \"US\":\n      code = \"US\";\n      break;\n    case \"Canada\":\n      code = \"CA\";\n      break;\n    case \"Germany\":\n      code = \"DE\";\n      break;\n    case \"Italy\":\n      code = \"IT\";\n      break;\n    case \"Spain\":\n      code = \"ES\";\n      break;\n    case \"Brazil\":\n      code = \"BR\";\n      break;\n    case \"Iran\":\n      code = \"IR\";\n      break;\n    case \"France\":\n      code = \"FR\";\n      break;\n    case \"Korea, South\":\n      code = \"KR\";\n      break;\n    case \"Switzerland\":\n      code = \"CH\";\n      break;\n    case \"Japan\":\n      code = \"JP\";\n      break;\n    case \"United Kingdom\":\n      code = \"GB\";\n      break;\n    case \"Netherlands\":\n      code = \"NL\";\n      break;\n    default:\n      code = \"GG\";\n  }\n  return code;\n}\n\nexport default function RacingBarChart({ data, type }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return;\n\n    data.sort((a, b) => b.value - a.value);\n\n    const yScale = scaleBand()\n      .paddingInner(0.2)\n      .domain(data.map((value, index) => index))\n      .range([0, dimensions.height]);\n\n    const xScale = scaleLinear()\n      .domain([0, max(data, entry => entry.value)])\n      .range([0, dimensions.width]);\n\n    // draw the bars\n    svg\n      .selectAll(\".bar\")\n      .data(data, (entry, index) => entry.name)\n      .join(enter =>\n        enter.append(\"rect\").attr(\"y\", (entry, index) => yScale(index))\n      )\n      .attr(\"fill\", entry => entry.color)\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", 0)\n      .attr(\"height\", yScale.bandwidth())\n      .transition()\n      .attr(\"width\", entry => xScale(entry.value))\n      .attr(\"y\", (entry, index) => yScale(index));\n\n    // // draw the labels\n    svg\n      .selectAll(\".label\")\n      .data(data, (entry, index) => entry.name)\n      .join(enter =>\n        enter\n          .append(\"text\")\n          .attr(\n            \"y\",\n            (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5\n          )\n      )\n      .text(entry => `${emojiFlags.countryCode(getCountryCode(entry.name)).emoji} ${entry.name} (${entry.value} ${type === \"cases\" ? \"cases\" : \"deaths\"})`)\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .transition()\n      .attr(\"y\", (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5);\n\n  }, [data, dimensions, type]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef} />\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ResizeObserver from 'resize-observer-polyfill';\n\n// responsive hook\nexport default function useResizeObserver(ref) {\n  const [dimensions, setDimensions] = useState(null);\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n\n  return dimensions;\n}\n","const countries = [\n  \"Brazil\",\n  \"China\",\n  \"Italy\",\n  \"Germany\",\n  \"Spain\",\n  \"Canada\",\n  \"US\",\n  \"Iran\",\n  \"France\",\n  \"Korea, South\",\n  \"Switzerland\",\n  \"Japan\",\n  \"United Kingdom\",\n  \"Netherlands\"\n]\n\nexport default countries;","import React, { useEffect, useState, Suspense } from 'react';\nimport RacingBarChart from './components/RacingBarChart';\nimport useInterval from './hooks/useInterval';\nimport countries from \"./countries\";\nimport moment from \"moment\";\nimport './App.css';\n\nconst getColors = country => {\n  let color;\n  switch (country) {\n    case \"China\":\n      color = \"#d6344740\";\n      break;\n    case \"Brazil\":\n      color = \"#ffe75e80\";\n      break;\n    case \"Italy\":\n      color = \"#baf1a1\";\n      break;\n    case \"Germany\":\n      color = \"#ff1e5680\";\n      break;\n    case \"France\":\n      color = \"#19296580\";\n      break;\n    case \"Canada\":\n      color = \"#ff1e5690\";\n      break;\n    case \"US\":\n      color = \"#b21f6680\";\n      break;\n    case \"Iran\":\n      color = \"#1eb2a6\";\n      break;\n    case \"Spain\":\n      color = \"#feb72b\";\n      break;\n    case \"Korea, South\":\n      color = \"#4a47a350\";\n      break;\n    case \"Switzerland\":\n      color = \"#d6344740\";\n      break;\n    case \"Japan\":\n      color = \"#d6344720\";\n      break;\n    case \"United Kingdom\":\n      color = \"#00508280\";\n      break;\n    case \"Netherlands\":\n      color = \"#ffa41b95\";\n      break;\n    default:\n      color = \"black\";\n  }\n  return color;\n}\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [iteration, setIteration] = useState(0);\n  const [currentData, setCurrentData] = useState([]);\n  const [type, setType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then(response => response.ok && response.json())\n      .then(data => {\n        setData(data);\n        setTotal(data[\"US\"].length);\n      })\n      .catch(error => console.error(error));\n  }, []);\n\n  useInterval(() => {\n    if (!data || iteration > (total - 1))\n      return;\n\n    setCurrentData([...Object.keys(data).map((x, i) => {\n      return {\n        name: x,\n        value: type === \"cases\" ? data[x][iteration].confirmed : data[x][iteration].deaths,\n        color: getColors(x),\n        date: data[x][iteration].date\n      }\n    }).filter(x => countries.some(item => item.includes(x.name)))]\n    );\n    setIteration(iteration + 1);\n  }, 1000);\n\n  const handleChange = (e) => {\n    setType(e.target.value);\n\n    if (iteration > total - 1) {\n      setCurrentData([...Object.keys(data).map((x, i) => {\n        return {\n          name: x,\n          value: type === \"deaths\" ? data[x][iteration - 1].confirmed : data[x][iteration - 1].deaths,\n          color: getColors(x),\n          date: data[x][iteration - 1].date\n        }\n      }).filter(x => countries.some(item => item.includes(x.name)))]\n      );\n    }\n  }\n\n\n  return (\n    <>\n      <h1>Covid-19</h1>\n      <Suspense>\n        <h2>{currentData[0] && moment(currentData[0].date, 'YYYY-MM-DD').format('DD/MM/YYYY')}</h2>\n        <h2>Day {iteration + 1}</h2>\n        <div className=\"options\">\n          <label>\n            <input\n              type=\"radio\" name=\"type\" value=\"cases\"\n              checked={type === \"cases\"}\n              onChange={handleChange}\n            /> Cases\n          </label>\n          <label>\n            <input\n              type=\"radio\" name=\"type\" value=\"deaths\"\n              checked={type === \"deaths\"}\n              onChange={handleChange}\n            /> Deaths\n          </label>\n        </div>\n        <div className=\"container\">\n          <RacingBarChart data={currentData} type={type} />\n        </div>\n      </Suspense>\n      <button onClick={() => setIteration(0)}>Restart</button>\n      <footer>\n        <div>Made by <a href=\"https://www.github.com/lkameya\">Leo</a></div>\n        <div>Data from <a href=\"https://github.com/pomber/covid19\">@pomber</a></div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}